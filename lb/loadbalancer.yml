- hosts: all
  become: yes
  tasks:
   - name: install haproxy
     apt:
       name: haproxy
       state: present
       update_cache: true

   - name: install pacemaker
     apt:
       name: pacemaker
       state: present
       update_cache: true

   - name: install haveged
     apt:
       name: haveged
       state: present
       update_cache: true
     when: hostvars[item].lb_primary is defined
 
   - name: corosync-keygen
      shell: "corosync-keygen > corosync-keygen.txt"
      args:
        chdir: $HOME
        creates: corosync-keygen.txt
     when: hostvars[item].lb_primary is defined

   - name: Remove the apache package
     apt:
       name: haveged
       state: absent
     when: hostvars[item].lb_primary is defined

#   - name: "Build hosts file - Gluster"
#     lineinfile: dest=/etc/hosts regexp='.*{{ hostvars[item].gluster_hostname }}$' line="{{ hostvars[i
#     when: hostvars[item].lb_primary is defined
#     with_items: "{{ groups['all'] }}"

- hosts: ubuntu-masternode02
  become: yes
  tasks:
   - name: Create Corosync config folder
     shell: "mkdir /etc/corosync > etc-corosync-folder.txt"
     args:
       chdir: $HOME
       creates: etc-corosync-folder.txt

   - name: Copy Corosync authkey
     synchronize: src=/etc/corosync/authkey dest=/etc/corosync/authkey
     delegate_to: ubuntu-masternode01


- hosts: ubuntu-workernode02
  become: yes
  tasks:
   - name: Create Corosync config folder
     shell: "mkdir /etc/corosync > etc-corosync-folder.txt"
     args:
       chdir: $HOME
       creates: etc-corosync-folder.txt

   - name: Copy Corosync authkey
     synchronize: src=/etc/corosync/authkey dest=/etc/corosync/authkey
     delegate_to: ubuntu-workernode01

- hosts: masters
  become: yes
  tasks:
    - name: Download corosync.conf
      shell: "wget https://raw.githubusercontent.com/jpmenega/kubernetes/main/lb/masters/corosync.conf; mv corosync.conf /etc/corosync > wget-corosync-conf.txt"
      args:
       chdir: $HOME
       creates: wget-corosync-conf.txt

- hosts: workers
  become: yes
  tasks:
    - name: Download corosync.conf
      shell: "wget https://raw.githubusercontent.com/jpmenega/kubernetes/main/lb/workers/corosync.conf; mv corosync.conf /etc/corosync > wget-corosync-conf.txt"
      args:
       chdir: $HOME
       creates: wget-corosync-conf.txt

- hosts: all
  become: yes
  tasks:
   - name: Download haproxy heartbeat
      shell: "wget https://raw.githubusercontent.com/jpmenega/kubernetes/main/lb/heartbeat/haproxy; mv haproxy /usr/lib/ocf/resource.d/heartbeat; chmod 755 /usr/lib/ocf/resource.d/heartbeat/haproxy > wget-heartbeat-conf.txt"
      args:
       chdir: $HOME
       creates: wget-heartbeat-conf.txt

   - name: Start Corosync
     service:
       name: corosync.service
       state: started

   - name: Enable service Corosync
     service:
       name: corosync.service
       enabled: yes

   - name: Start Pacemaker
     service:
       name: pacemaker.service
       state: started

   - name: Enable service Pacemaker
     service:
       name: pacemaker.service
       enabled: yes

   - name: Start HAProxy
     service:
       name: haproxy.service
       state: started

   - name: Enable service HAProxy
     service:
       name: haproxy.service
       enabled: yes

   #- name: "Build hosts file - Gluster"
   #  lineinfile: dest=/etc/hosts regexp='.*{{ hostvars[item].gluster_hostname }}$' line="{{ hostvars[item].ansible_host }} {{ hostvars[item].gluster_hostname }}" state=present
   #  when: hostvars[item].gluster_hostname is defined
   #  with_items: "{{ groups['all'] }}"

   #- name: install glusterfs-client
   #  apt:
   #    name: glusterfs-client
   #    state: present

#- hosts: ubuntu-workernode01
#  become: yes
#  tasks:
#    - name: Gluster Probe
#      shell: "gluster peer probe gluster1.local > probe.txt"
#      args:
#        chdir: $HOME
#        creates: probe.txt

#    - name: Create volume
#      shell: "gluster volume create volume-infra replica 2 gluster0.local:/gfs/infra gluster1.local:/gfs/infra force > volume-infra.txt"
#      args:
#        chdir: $HOME
#        creates: volume-infra.txt

#    - name: Start volume
#      shell: "gluster volume start volume-infra > start_volume.txt"
#      args:
#        chdir: $HOME
