- hosts: all
  become: yes
  tasks:
   - name: install haproxy
     apt:
       name: haproxy
       state: present
       update_cache: true

   - name: install pacemaker
     apt:
       name: pacemaker
       state: present
       update_cache: true

   - name: install haveged
     apt:
       name: haveged
       state: present
       update_cache: true
     when: lb_primary == "yes"
     with_items: "{{ lb_primary | default([]) }}"
 
   - name: corosync-keygen
     shell: "corosync-keygen > corosync-keygen.txt"
     args:
       chdir: $HOME
       creates: corosync-keygen.txt
     when: lb_primary == "yes"
     with_items: "{{ lb_primary | default([]) }}"

   - name: Remove the haveged package
     apt:
       name: haveged
       state: absent
     when: lb_primary == "yes"
     with_items: "{{ lb_primary | default([]) }}"

#   - name: "Build hosts file - Gluster"
#     lineinfile: dest=/etc/hosts regexp='.*{{ hostvars[item].gluster_hostname }}$' line="{{ hostvars[i
#     with_items: "{{ groups['all'] }}"

   - name: Create Corosync config folder
      file:
        path: /etc/corosync
        state: directory
      when: lb_slave == "yes"
      with_items: "{{ lb_slave | default([]) }}"

- hosts: masters
  become: yes
  tasks:
    - name: Copy Corosync authkey
      synchronize: src=/etc/corosync/authkey dest=/etc/corosync/authkey
      delegate_to: ubuntu-masternode01
      when: lb_slave == "yes"
      with_items: "{{ lb_slave | default([]) }}"

    - name: Download corosync.conf
      shell: "wget https://raw.githubusercontent.com/jpmenega/kubernetes/main/lb/masters/corosync.conf; mv corosync.conf /etc/corosync > wget-corosync-conf.txt"
      args:
       chdir: $HOME
       creates: wget-corosync-conf.txt
      when: notaint == "yes"
      with_items: "{{ notaint | default([]) }}"

    - name: Download corosync.conf
      shell: "wget https://raw.githubusercontent.com/jpmenega/kubernetes/main/lb/taint/corosync.conf; mv corosync.conf /etc/corosync > wget-corosync-conf.txt"
      args:
       chdir: $HOME
       creates: wget-corosync-conf.txt
      when: taint == "yes"
      with_items: "{{ taint | default([]) }}"

    - name: Download haproxy.cfg
      shell: "wget https://raw.githubusercontent.com/jpmenega/kubernetes/main/lb/masters/haproxy.cfg; mv haproxy.cfg /etc/haproxy > wget-haproxy-cfg.txt"
      args:
       chdir: $HOME
       creates: wget-haproxy-cfg.txt
      when: notaint == "yes"
      with_items: "{{ notaint | default([]) }}"

    - name: Download haproxy.cfg
      shell: "wget https://raw.githubusercontent.com/jpmenega/kubernetes/main/lb/taint/haproxy.cfg; mv haproxy.cfg /etc/haproxy > wget-haproxy-cfg.txt"
      args:
       chdir: $HOME
       creates: wget-haproxy-cfg.txt
      when: taint == "yes"
      with_items: "{{ taint | default([]) }}"


- hosts: workers
  become: yes
  tasks:
    - name: Copy Corosync authkey
      synchronize: src=/etc/corosync/authkey dest=/etc/corosync/authkey
      delegate_to: ubuntu-workernode01
      when: lb_slave == "yes"
      with_items: "{{ lb_slave | default([]) }}"

    - name: Download corosync.conf
      shell: "wget https://raw.githubusercontent.com/jpmenega/kubernetes/main/lb/workers/corosync.conf; mv corosync.conf /etc/corosync > wget-corosync-conf.txt"
      args:
       chdir: $HOME
       creates: wget-corosync-conf.txt

    - name: Download haproxy.cfg
      shell: "wget https://raw.githubusercontent.com/jpmenega/kubernetes/main/lb/workers/haproxy.cfg; mv haproxy.cfg /etc/haproxy > wget-haproxy-cfg.txt"
      args:
       chdir: $HOME
       creates: wget-haproxy-cfg.txt

- hosts: all
  become: yes
  tasks:
   - name: Download haproxy heartbeat
     shell: "wget https://raw.githubusercontent.com/jpmenega/kubernetes/main/lb/heartbeat/haproxy; mv haproxy /usr/lib/ocf/resource.d/heartbeat; chmod 755 /usr/lib/ocf/resource.d/heartbeat/haproxy > wget-heartbeat-conf.txt"
     args:
      chdir: $HOME
      creates: wget-heartbeat-conf.txt

   - name: Start Corosync
     service:
       name: corosync.service
       state: restarted

   - name: Enable service Corosync
     service:
       name: corosync.service
       enabled: yes

   - name: Start Pacemaker
     service:
       name: pacemaker.service
       state: restarted

   - name: Enable service Pacemaker
     service:
       name: pacemaker.service
       enabled: yes

   - name: Start HAProxy
     service:
       name: haproxy.service
       state: stopped

   - name: Enable service HAProxy
     service:
       name: haproxy.service
       enabled: no

- hosts: masters
  become: yes
  tasks:
    - name: Configure pacemaker step 1
      shell: "crm configure property stonith-enabled=false > crm1.txt"
      args:
       chdir: $HOME
       creates: crm1.txt
      when: lb_primary == "yes"
      with_items: "{{ lb_primary | default([]) }}"

    - name: Configure pacemaker step 2
      shell: "crm configure property no-quorum-policy=ignore > crm2.txt"
      args:
       chdir: $HOME
       creates: crm2.txt
      when: lb_primary == "yes"
      with_items: "{{ lb_primary | default([]) }}"

    - name: Configure pacemaker step 3
      shell: "crm configure primitive VIP ocf:heartbeat:IPaddr2 params ip=\"192.168.1.249\" cidr_netmask=\"24\" nic=\"eth0\" op monitor interval=\"10s\" meta migration-threshold=\"10\" > crm3.txt"
      args:
       chdir: $HOME
       creates: crm3.txt
      when: lb_primary == "yes"
      with_items: "{{ lb_primary | default([]) }}"

    - name: Configure pacemaker step 3.2
      shell: "crm configure primitive VIP2 ocf:heartbeat:IPaddr2 params ip=\"192.168.1.250\" cidr_netmask=\"24\" nic=\"eth0\" op monitor interval=\"10s\" meta migration-threshold=\"10\" > crm32.txt"
      args:
       chdir: $HOME
       creates: crm32.txt
      when: lb_primary == "yes" and taint == "yes"
      with_items: "{{ (lb_primary | default([])) and (taint | default([])) }}"

    - name: Configure pacemaker step 4
      shell: "crm configure primitive haproxyLB ocf:heartbeat:haproxy params conffile=/etc/haproxy/haproxy.cfg op monitor interval=10s timeout=60s op start timeout=30s interval=0 op stop timeout=30s interval=0 meta migration-threshold=10 > crm4.txt"
      args:
       chdir: $HOME
       creates: crm4.txt
      when: lb_primary == "yes"
      with_items: "{{ lb_primary | default([]) }}"

    - name: Configure pacemaker step 5
      shell: "crm configure group grp_balancing VIP haproxyLB > crm5.txt"
      args:
       chdir: $HOME
       creates: crm5.txt
      when: lb_primary == "yes" and notaint="yes"
      with_items: "{{ (lb_primary | default([])) and (notaint | default([])) }}"

    - name: Configure pacemaker step 5
      shell: "crm configure group grp_balancing VIP VIP2 haproxyLB > crm5.txt"
      args:
       chdir: $HOME
       creates: crm5.txt
      when: lb_primary == "yes" and taint="yes"
      with_items: "{{ (lb_primary | default([])) and (taint | default([])) }}"

    - name: Remove default node1
      shell: "crm_node -R node1 --force > crm6.txt"
      args:
       chdir: $HOME
       creates: crm6.txt
      when: lb_primary == "yes"
      with_items: "{{ lb_primary | default([]) }}"

- hosts: workers
  become: yes
  tasks:
    - name: Configure pacemaker step 1
      shell: "crm configure property stonith-enabled=false > crm1.txt"
      args:
       chdir: $HOME
       creates: crm1.txt
      when: lb_primary == "yes"
      with_items: "{{ lb_primary | default([]) }}"

    - name: Configure pacemaker step 2
      shell: "crm configure property no-quorum-policy=ignore > crm2.txt"
      args:
       chdir: $HOME
       creates: crm2.txt
      when: lb_primary == "yes"
      with_items: "{{ lb_primary | default([]) }}"

    - name: Configure pacemaker step 3
      shell: "crm configure primitive VIP ocf:heartbeat:IPaddr2 params ip=\"192.168.1.250\" cidr_netmask=\"24\" nic=\"eth0\" op monitor interval=\"10s\" meta migration-threshold=\"10\" > crm3.txt"
      args:
       chdir: $HOME
       creates: crm3.txt
      when: lb_primary == "yes"
      with_items: "{{ lb_primary | default([]) }}"

    - name: Configure pacemaker step 4
      shell: "crm configure primitive haproxyLB ocf:heartbeat:haproxy params conffile=/etc/haproxy/haproxy.cfg op monitor interval=10s timeout=60s op start timeout=30s interval=0 op stop timeout=30s interval=0 meta migration-threshold=10 > crm4.txt"
      args:
       chdir: $HOME
       creates: crm4.txt
      when: lb_primary == "yes"
      with_items: "{{ lb_primary | default([]) }}"

    - name: Configure pacemaker step 5
      shell: "crm configure group grp_balancing VIP haproxyLB > crm5.txt"
      args:
       chdir: $HOME
       creates: crm5.txt
      when: lb_primary == "yes"
      with_items: "{{ lb_primary | default([]) }}"

    - name: Remove default node1
      shell: "crm_node -R node1 --force > crm6.txt"
      args:
       chdir: $HOME
       creates: crm6.txt
      when: lb_primary == "yes"
      with_items: "{{ lb_primary | default([]) }}"
